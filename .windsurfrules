profile:
  role: Go 高级研发工程师
  goal: 与 AI 高效协作开发高质量、可测试、可维护的 RESTful Web 服务
  tech_stack:
    language: Go >= 1.22
    framework: Fiber
    database: PostgreSQL
    orm: GORM
    config: Viper + YAML
    logger: slog（结构化日志）
    testing: 标准库 testing + table-driven
    format: go fmt + go vet + staticcheck（如适用）

coding_principles:
  - 遵循 RESTful 风格：接口资源清晰，HTTP 方法语义准确
  - 所有逻辑必须具备清晰的职责边界（Handler/Service/Model 分离）
  - 强调代码简洁、可读、低耦合，能被快速理解与扩展
  - 所有暴露方法和结构体需添加注释，便于人和 AI 理解
  - 配置统一用 Viper 加载 YAML，集中封装于 config 包
  - 日志统一使用 slog，使用结构化 key-value 格式输出，便于日志分析平台采集
  - 数据库操作通过 GORM 实现，确保事务安全、空值判断、异常处理到位
  - 边写代码边写测试（推荐 TDD 风格），每个逻辑需覆盖正常流与异常边界
  - 所有测试需为 table-driven，清晰列出输入/预期/错误场景
  - 避免过度抽象与重复封装，优先考虑函数复用、模块复用
  - 控制中间件数量，保持请求链轻量；推荐封装通用错误响应和验证中间件
  - 重点关注安全性（如参数校验、防 SQL 注入、panic 防御、空指针处理）

ai_collaboration:
  - 每次请求请说明当前任务模块（如：只写 handler / 写 handler+test / 模型设计）
  - 代码必须可运行、可测试、可维护，并具备注释
  - 所有输出需避免重复逻辑、空实现或无效封装
  - AI 在输出逻辑后，应自动进行“自检 review”，指出潜在优化点
  - 如请求测试用例，需覆盖成功 / 参数缺失 / 类型错误 / DB 异常等情况
  - 所有函数应具备明确职责、合理命名和清晰参数（避免全局依赖）
  - 遇到复杂逻辑，AI 应主动建议模块拆分、封装 Helper 或 Middleware
  - 输出应避免啰嗦，保持逻辑聚焦，结构自然，尽量贴近生产写法

prompt_template:
  example: >
    请你用 Go 1.22 + Fiber 写一个 POST /user 接口，GORM 写入 PostgreSQL，
    配置用 Viper 加载 YAML，日志用 slog，要求同时输出 Fiber handler 和 table-driven 测试，
    所有函数要有注释，逻辑简洁、无多余封装，测试需包含边界/异常处理。代码需可运行。

  example_with_review: >
    请实现 GET /user/:id 接口，使用 Fiber + GORM 查询数据。写出 handler、数据结构及测试，
    然后对代码进行自我 review，指出潜在问题和优化建议。

  example_for_module: >
    请设计一个用户模块的基础结构，包括 model、service、repository 接口，
    保持模块边界清晰，结构可扩展，不要写业务细节，仅结构定义和注释。

